// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/exec_command/exec_command.go
//
// Generated by this command:
//
//	mockgen -source=pkg/exec_command/exec_command.go -destination=pkg/exec_command/mocks/mock_exec_command.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIShellCommand is a mock of IShellCommand interface.
type MockIShellCommand struct {
	ctrl     *gomock.Controller
	recorder *MockIShellCommandMockRecorder
}

// MockIShellCommandMockRecorder is the mock recorder for MockIShellCommand.
type MockIShellCommandMockRecorder struct {
	mock *MockIShellCommand
}

// NewMockIShellCommand creates a new mock instance.
func NewMockIShellCommand(ctrl *gomock.Controller) *MockIShellCommand {
	mock := &MockIShellCommand{ctrl: ctrl}
	mock.recorder = &MockIShellCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShellCommand) EXPECT() *MockIShellCommandMockRecorder {
	return m.recorder
}

// CombinedOutput mocks base method.
func (m *MockIShellCommand) CombinedOutput() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinedOutput")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput.
func (mr *MockIShellCommandMockRecorder) CombinedOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockIShellCommand)(nil).CombinedOutput))
}

// SetDir mocks base method.
func (m *MockIShellCommand) SetDir(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDir", arg0)
}

// SetDir indicates an expected call of SetDir.
func (mr *MockIShellCommandMockRecorder) SetDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDir", reflect.TypeOf((*MockIShellCommand)(nil).SetDir), arg0)
}

// Wait mocks base method.
func (m *MockIShellCommand) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockIShellCommandMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockIShellCommand)(nil).Wait))
}
